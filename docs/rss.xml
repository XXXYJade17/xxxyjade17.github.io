<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://xxxyjade17.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://xxxyjade17.github.io</link></image><lastBuildDate>Mon, 12 May 2025 09:53:57 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>MyBatis - 动态SQL</title><link>https://xxxyjade17.github.io/post/MyBatis%20-%20-dong-tai-SQL.html</link><description># 动态SQL的概念与应用
动态SQL是一种根据不同的条件动态生成SQL语句的技术。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MyBatis%20-%20-dong-tai-SQL.html</guid><pubDate>Mon, 12 May 2025 09:53:32 +0000</pubDate></item><item><title>MyBatis</title><link>https://xxxyjade17.github.io/post/MyBatis.html</link><description># 什么是MyBatis
**[MyBatis](https://mybatis.net.cn/getting-started.html)** 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MyBatis.html</guid><pubDate>Mon, 12 May 2025 09:47:56 +0000</pubDate></item><item><title>PageHelper</title><link>https://xxxyjade17.github.io/post/PageHelper.html</link><description># 什么是PageHelper
**PageHelper是第三方提供在 Mybatis 框架中实现分页的插件, 用来简化分页操作, 提高开发效率**
***
# 导入依赖
```
&lt;!--分页插件PageHelper--&gt;
&lt;dependency&gt;
       &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;
       &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;
       &lt;version&gt;1.4.7&lt;/version&gt;
&lt;/dependency&gt;
```
# 实现代码
- ### Mapper接口
  ```
  @Mapper
  public interface DemoMapper {
      @Select('select emp.*,dept.name deptName from emp left join dept on emp.dept_id=dept.id order by emp.update_time desc')
      public List&lt;Emp&gt; list();
   } 
  ```
  **在实现分页查找的MySQL语句省略limit部分**
- ### Service实现类
  ```
    @Override
    public PageResult&lt;Emp&gt; page(Integer page, Integer pageSize) {

            /**
               *设置分页参数
               *@param page 页码
               *@param pageSize 单页记录数
               */
            PageHelper.startPage(page,pageSize);

            //执行查询
            List&lt;Emp&gt; empList = empMapper.list();

            //结果封装
            Page&lt;Emp&gt; p = (Page)empList;

            return new PageResult&lt;Emp&gt;(p.getTotal(),p.getResult());
    }
  ```
# 总结
  - MySQL语句少写了limit部分
  - Mapper接口可以不用再写page和pageSize参数
  - 不用重新去计算page的起始索引。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/PageHelper.html</guid><pubDate>Sun, 11 May 2025 16:50:14 +0000</pubDate></item><item><title>MySQL - DCL</title><link>https://xxxyjade17.github.io/post/MySQL%20-%20DCL.html</link><description># DCL
## 管理用户
- ### 查询用户
```
use mysql;
select * from user;
```
- ### 创建用户
```
create user '用户名@主机名' identified by '密码';
```
- ### 修改用户密码
```
alter user '用户名@主机名' identified with '原密码' by '新密码';
```
- ### 删除用户
```
drop user '用户名@主机名';
```
***
## 权限控制
- ### 查询权限
```
show grants for '用户名@主机名';
```
- ### 授予权限
```
grant 权限 on 数据库名  表名 to '用户名@主机名';
```
- ### 撤销权限
```
revoke 权限 on 数据库名  表名 from '用户名@主机名';
```
- ### 权限
  **1. 所有权限  :  all, all privileges**
  **2. 查询数据  :  select**
  **3.  插入数据  :  insert**
  **4. 修改数据  :  update**
  **5. 删除数据  :  delete**
  **6. 修改表  :  alter**
  **7. 删除数据库 / 表 / 视图  :  drop**
  **8. 创建数据库 / 表  :  create**
***
## 函数
- ### 字符串函数
  **1. 字符串拼接 :**  ```concat(s1,s2,...); ```
  **2. 转小写 :**  ```lower(str)```
  **3. 转大写 :**  ```upper(str)```
  **4. 在str左侧以pad填充，至长度为n :**  ```lpad(str,n,pad)```
  **5. 在str右侧以pad填充，至长度为n :**  ```rpad(str,n,pad)```
  **6. 去除两侧空格 :**  ```trim(str)```
  **7. 从字符串的start开始截取len个字符 :**  ```substring(str,start,len)```
- ### 数值函数
  **1. 向上取整 :**  ```ceil(num)```
  **2. 向下取整  :**  ```floor( num )```
  **3. x/y的模 :**  ```mod(x/y)```
  **4. 0~1随机数 :**  ```rand( )```
  **5. 四舍五入,保留y位小数 :**  ```round(x,y)```
- ### 日期函数
  **1. 当前日期 :**  ```curdate( )```
  **2. 当前时间 :**  ```curtime( )```
  **3. 当前日期和时间 :**  ```now()```
  **4. 当前年份 :**  ```year(date)```
  **5. 当前月份 :**  ```month(date)```
  **6. 当前日 :**  ```day(date)```
  **7. 在当前日期的type(年月日)加value :**  ```date_add(date,interval value type)```
  **8. 两个之间差的天数 :**  ```detediff(date1,date2)```
- ### 流程控制函数
  1. ```if(value,t,f)```
解释  :  value真返t假返f
  2. ```ifnull(value1,value2)```
解释  :  value1不为null返value1，为null返value2
  3. ```case value when value1 then ans1 when value2 then ans2 ... else default end```
解释  :  value等于value1返回ans1,等于value2返回ans2,...,否则返回default
***
## 约束
- ### 示例
```
create table user(
    id int primary key  auto_increment comment,
    name varchar(10) not null unique ,
    age int check ( age&gt;0 &amp;&amp; age&lt;=120 ),
    status char(1) default 1,
    gender char(1)
)
```
- ### 约束种类
  **not null : 非空约束**
  **unique : 唯一约束**
  **primary key : 主键约束**
  **default : 默认约束**
  **check(条件) : 检查约束**
  **foreign key : 外键约束**
***
## 约束外键
- ### 加入外键
```
create table 表名(
    字段名 数据类型
     ......
     constraint 外键名 foreign key(外键字段名) references 主表(列名)
);
alter table 表名 
add constraint 外键名 
foreign key(外键字段名) 
references 主表(列名)
on delete 删除行为
on update 更新行为;
```
- ### 删除外键
```
alter table 表名 drop  foreign key 外键名
```
- ### 外键删除/更新的行为及其含义
  **no action  :  当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除 / 更新。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MySQL%20-%20DCL.html</guid><pubDate>Sun, 11 May 2025 14:15:37 +0000</pubDate></item><item><title>MySQL - DQL</title><link>https://xxxyjade17.github.io/post/MySQL%20-%20DQL.html</link><description># DQL

## 条件查询 :  
  - **语法 :**  ```select 字段表 from 表名 where 条件列表```
  - **条件列表**
    **and  &amp;&amp;  :  与**
    **or  ||  :  或**
    **not  !  :  非**
    **is null  :  是否空**
    **&lt;&gt;  !=  :  不等**
    **between  __  and  __  : 之间**
    **in( __ , __ , ... ) : 满足条件**
    **like '_%'  : 模糊匹配   _单个字符   %任意字符**
***
## 聚合函数
  **count( )  : 统计行数**
  **avg( )  : 平均值**
  **max( )  : 最大值**
  **min( )  : 最小值**
  **sum( )  : 求和**
***
## 分组查询
  - **语法 :**  ```select 字段表 from 表名 group by 字段表 having 筛选条件```
  - **执行顺序 :**  **where &gt; 聚合函数 &gt; having**
***
## 排序查询 ( 默认升序 ) 
  - **降序查询 :**  ```select 字段表 from 表名 order by 字段表 desc```
  - **升序查询 :**  ```select 字段表 from 表名 order by 字段表 asc```
***
## 分页查询
  - **语法 :**  ```select 字段表 from 表名 limit 起始索引,查询记录数```
  - **起始索引默认为0**
***
## DQL执行顺序
   **4. select**      
   **1. from**       
   **2. where**      
   **3. group by  ____  having**       
   **5. order by**        
   **6. limit**        。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MySQL%20-%20DQL.html</guid><pubDate>Sun, 11 May 2025 12:16:53 +0000</pubDate></item><item><title>JDBC</title><link>https://xxxyjade17.github.io/post/JDBC.html</link><description># JDBC是什么
JDBC（Java DataBase Connectivity）使用 Java 语言操作关系型数据库的一套 API
# 导入依赖
```xml
&lt;dependency&gt;
        &lt;groupId&gt;com.mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;
        &lt;version&gt;8.0.33&lt;/version&gt;
&lt;/dependency&gt;
```
# 简单示例
```java
[1.注册驱动]
Class.forName('com.mysql.cj.jdbc.Driver');

[2.获取数据库连接]
//数据库地址
String url='jdbc:mysql://localhost:3306/web';     
//数据库用户名
String username='root';
//密码
String password='xxxyjade17';
//创建连接对象
Connection connection=DriverManager.getConnection(url,username,password);

[3.获取SQL语句执行]
//创建预执行对象
Statement statement=connection.createStatement();

[4.执行sql]
//接收返回值
int i=statement.executeUpdate('update user set age = 30 where id = 1');

[5.释放资源]
statement.close();
connection.close();
```
# 预编译示例
```java
[1.数据库配置]
String url='jdbc:mysql://localhost:3306/web';
String username='root';
String password='xxxyjade17';
//数据库操作语句
String sql='SELECT id,username,password,name,age from user where username=? and password=?';

[2.创建对象]
//连接对象
Connection connection = null;
//预编译对象
PreparedStatement stmt = null;
//查询返回的结果
ResultSet rs = null;  

[3.执行]
try{
    //创建驱动
    Class.forName('com.mysql.cj.jdbc.Driver');
    //获取连接
    connection=DriverManager.getConnection(url,username,password);
    //获取预编译对象
    stmt=connection.prepareStatement(sql);
    //赋值
    stmt.setString(1,'daqiao');
    stmt.setString(2,'123456');
    //执行操作
    rs=stmt.executeQuery();
    while(rs.next()){
        User user=new User(
            rs.getInt('id'),
            rs.getString('username'),
            rs.getString('password'),
            rs.getString('name'),
            rs.getInt('age')
        );
        System.out.println(user);
    }
} catch (ClassNotFoundException e) {
    throw new RuntimeException(e);
} catch (SQLException e) {
    throw new RuntimeException(e);
} finally {
    try{
        if(rs!=null)rs.close();
        if(stmt!=null)stmt.close();
        if(connection!=null)connection.close();
    } catch (SQLException e) {
        throw new RuntimeException(e);
    }
}
```
。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/JDBC.html</guid><pubDate>Sun, 11 May 2025 11:52:01 +0000</pubDate></item></channel></rss>