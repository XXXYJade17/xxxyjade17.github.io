<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Blog Title</title><link>https://xxxyjade17.github.io</link><description>Blog description</description><copyright>Blog Title</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://xxxyjade17.github.io</link></image><lastBuildDate>Sat, 07 Jun 2025 13:28:49 +0000</lastBuildDate><managingEditor>Blog Title</managingEditor><ttl>60</ttl><webMaster>Blog Title</webMaster><item><title>Maven</title><link>https://xxxyjade17.github.io/post/Maven.html</link><description>## 继承 :

  1. 创建maven父工程的模块，只留一个pom文件，并且设置打包方式为pom
     ```xml
     &lt;?xml version='1.0' encoding='UTF-8'?&gt;
         &lt;project xmlns='http://maven.apache.org/POM/4.0.0'
                 xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
                 xsi:schemaLocation='http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd'&gt;
       &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;

       &lt;groupId&gt;com.xxxyjade17&lt;/groupId&gt;
       &lt;artifactId&gt;spring&lt;/artifactId&gt;
       &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
       &lt;packaging&gt;pom&lt;/packaging&gt;    //设置打包方式

       &lt;dependencies&gt;
           ......    //省略依赖
       &lt;/dependencies&gt;

     &lt;/project&gt;
     ```
  2. 在子工程配置继承关系
     ```xml
     &lt;parent&gt;
             &lt;groupId&gt;com.itheima&lt;/groupId&gt;
             &lt;artifactId&gt;tlias-parent&lt;/artifactId&gt;
             &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;
             指定父工程pom.xml的相对路径
             &lt;relativePath&gt;../tlias-parent/pom.xml&lt;/relativePath&gt;
     &lt;/parent&gt;
     ```
  - **注意**:
         在子工程中，配置了继承关系之后，坐标中的 groupId 是可以省略的，因为会自动继承父工程的 。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/Maven.html</guid><pubDate>Thu, 05 Jun 2025 15:12:16 +0000</pubDate></item><item><title>SSM - Spring</title><link>https://xxxyjade17.github.io/post/SSM%20-%20Spring.html</link><description>## IoC(Inversion of Control)
- 控制反转 : 使用对象时,由**主动new产生对象**转换为**外部提供对象**
- Spring中提供了一个IoC容器充当外部，统一管理对象的创建和初始化
- 在IoC容器中被管理的对象统称为Bean
- 示例 :
  获取IoC容器 : ``` ApplicationContext ctx = new ClassPathXmlApplicationContext('applicationContext.xml'); ```
  获取bean : ``` BookDao bookDao = (BookDao) ctx.getBean('bookDao'); ```
***
## Bean
- #### 一、Bean 基本配置
  1. 别名（name）
    可定义多个别名，用逗号 (,)、分号 (;) 或空格分隔。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/SSM%20-%20Spring.html</guid><pubDate>Wed, 04 Jun 2025 14:05:01 +0000</pubDate></item><item><title>Spring - AOP</title><link>https://xxxyjade17.github.io/post/Spring%20-%20AOP.html</link><description>## 什么是AOP
Aspect Oriented Programming（面向切面编程、面向方面编程），可简单理解为就是面向特定方法编程。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/Spring%20-%20AOP.html</guid><pubDate>Sat, 31 May 2025 02:19:50 +0000</pubDate></item><item><title>Interceptor拦截器</title><link>https://xxxyjade17.github.io/post/Interceptor-lan-jie-qi.html</link><description>## Interceptor
- 概念：是一种动态拦截方法调用的机制，类似于过滤器。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/Interceptor-lan-jie-qi.html</guid><pubDate>Fri, 30 May 2025 11:57:34 +0000</pubDate></item><item><title>Filter过滤器</title><link>https://xxxyjade17.github.io/post/Filter-guo-lv-qi.html</link><description>## Filter
  - 概念 : JavaWeb 三大组件（Servlet、Filter、Listener）之一。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/Filter-guo-lv-qi.html</guid><pubDate>Thu, 29 May 2025 04:46:06 +0000</pubDate></item><item><title>会话技术</title><link>https://xxxyjade17.github.io/post/hui-hua-ji-shu.html</link><description># Cookie
## 优点:
  - HTTP协议自带支持
## 缺点:
  - 移动端无法使用
  - 不安全, 用户可以手动禁用
  - Cookie不能跨域使用
## 使用
### 1.设置 Cookie
```
@GetMapping ('/c1')
public Result cookie1 (HttpServletResponse response){
    response.addCookie (new Cookie ('login_username', 'itheima')); // 设置 Cookie / 响应 Cookie
    return Result.success ();
}
```
### 2.获取 Cookie
```
@GetMapping ('/c2')
public Result cookie2 (HttpServletRequest request){
    Cookie [] cookies = request.getCookies ();
    for (Cookie cookie : cookies) {
        if (cookie.getName ().equals ('login_username')){
            System.out.println ('login_username:'+cookie.getValue ()); // 输出 name 为 login_username 的 cookie
        }
    }
    return Result.success ();
}
```
***
# Session
## 优点:
  - 存储在服务端, 安全
## 缺点:
  - 服务器集群环境无法直接使用
  - Cookie的缺点
### 1.存值
```
@GetMapping ('/s1')
public Result session1 (HttpSession session){
    log.info('HttpSession-s1: {}', session.hashCode ());
    session.setAttribute ('loginUser', 'tom'); // 往 session 中存储数据
    return Result.success ();
}
```
### 3.取值
```
@GetMapping ('/s2')
public Result session2 (HttpSession session){
    log.info('HttpSession-s2: {}', session.hashCode ());
    Object loginUser = session.getAttribute ('loginUser'); // 从 session 中获取数据
    log.info('loginUser: {}', loginUser);
    return Result.success(loginUser);
}
```
***
# Token
## 优点:
  - 支持PC端、移动端
  - 解决集群环境下的认证问题
  - 减轻服务器端存储压力
## 缺点:
  - 需要手动实现
## JWT令牌
### 介绍:
  - 全称: [Json Web Token](https://jwt.io/)
  - 定义了一种简洁的、自包含的格式，用于在通信双方以 json 数据格式安全的传输信息
### 组成:
  - 第一部分：Header（头），记录令牌类型、签名算法等。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/hui-hua-ji-shu.html</guid><pubDate>Sat, 24 May 2025 05:09:38 +0000</pubDate></item><item><title>MybatisPlus</title><link>https://xxxyjade17.github.io/post/MybatisPlus.html</link><description>## 使用 MybatisPlus 的基本步骤：
- ### 引入 MybatisPlus 依赖，代替 Mybatis 依赖
  ```
  &lt;dependency&gt;
      &lt;groupId&gt;com.baomidou&lt;/groupId&gt;
      &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;
      &lt;version&gt;3.5.3.1&lt;/version&gt;
  &lt;/dependency&gt;
   ```
- ### 定义 Mapper 接口并继承 BaseMapper
  ```
  public interface UserMapper extends BaseMapper&lt;User&gt; {
  }
  ```
***
## MybatisPlus 是如何获取实现 CRUD 的数据库表信息的？
  - 默认以类名驼峰转下划线作为表名
  - 默认把名为 id 的字段作为主键
  - 默认把变量名驼峰转下划线作为表的字段名
***
## MybatisPlus 的常用注解有哪些？
  - @TableName : 指定表名称及全局配置
  - @TableId : 指定 id 字段及相关配置
  - @TableField : 指定普通字段及相关配置
***
## IdType 的常见类型有哪些？
  - AUTO : 数据库自增长
  - INPUT : 通过 set 方法自行输入
  - ASSIGN_ID : 分配 ID，接口 IdentifierGenerator 的方法 nextId 来生成 id，默认实现类为 DefaultIdentifierGenerator 雪花算法
***
## 使用 @TableField 的常见场景是？
  - 成员变量名与数据库字段名不一致
  - 成员变量名以 is 开头，且是布尔值
  - 成员变量名与数据库关键字冲突
  - 成员变量不是数据库字段。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MybatisPlus.html</guid><pubDate>Thu, 15 May 2025 05:30:09 +0000</pubDate></item><item><title>MyBatis - 结果映射</title><link>https://xxxyjade17.github.io/post/MyBatis%20-%20-jie-guo-ying-she.html</link><description>### 查询部分
```
&lt;select id='getById' resultMap='empResultMap'&gt;
        select
            e.* ,
            ee.id ee_id ,
            ee.emp_id ee_empid ,
            ee.begin ee_begin ,
            ee.end ee_end ,
            ee.company ee_company ,
            ee.job ee_job
        from emp e left join emp_expr ee on e.id = ee.emp_id
        where e.id = #{id}
&lt;/select&gt;
```
  **查询结果将通过empResultMap进行映射处理**
***
### 结果映射部分
```
&lt;resultMap id='empResultMap' type='com.xxxyjade17.pojo.Emp'&gt;
    &lt;id column='id' property='id' /&gt;
    &lt;result column='username' property='username' /&gt;
    &lt;result column='password' property='password' /&gt;
    &lt;result column='name' property='name' /&gt;
    &lt;result column='gender' property='gender' /&gt;
    &lt;result column='phone' property='phone' /&gt;
    &lt;result column='job' property='job' /&gt;
    &lt;result column='salary' property='salary' /&gt;
    &lt;result column='image' property='image' /&gt;
    &lt;result column='entryDate' property='entryDate' /&gt;
    &lt;result column='deptId' property='deptId' /&gt;
    &lt;result column='createTime' property='createTime' /&gt;
    &lt;result column='updateTime' property='updateTime' /&gt;
    &lt;collection property='exprList' ofType='com.xxxyjade17.pojo.EmpExpr'&gt;
        &lt;id column='ee_id' property='id' /&gt;
        &lt;result column='ee_company' property='company' /&gt;
        &lt;result column='ee_job' property='job' /&gt;
        &lt;result column='ee_begin' property='begin' /&gt;
        &lt;result column='ee_end' property='end' /&gt;
        &lt;result column='ee_empId' property='empId' /&gt;
    &lt;/collection&gt;
&lt;/resultMap&gt;
```
**主映射配置：**
  - type='' : 指定映射的目标 Java 类
  - column='' , property='' : 将查询结果的列映射到Emp类的属性
  - collection标签 : 用于处理一对多关系，将多条映射到类的属性上
  - ofType='' : 指定集合元素的类型
  - id标签 : 映射表的主键列, 提高缓存效率，确保对象唯一性
  - result标签 : 映射普通数据列, 无特殊需求，只需简单映射。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MyBatis%20-%20-jie-guo-ying-she.html</guid><pubDate>Wed, 14 May 2025 12:22:59 +0000</pubDate></item><item><title>Spring - 全局异常处理器</title><link>https://xxxyjade17.github.io/post/Spring%20-%20-quan-ju-yi-chang-chu-li-qi.html</link><description>## 如何定义一个全局异常处理类
```
@Slf4j
@RestControllerAdvice
public class GlobalExceptionHandler {
}
```
  **@RestControllerAdvice  = @ControllerAdvice + @ResponseBody**
## 捕获异常
```
@ExceptionHandler
public Result handleException(Exception e){
}
```
。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/Spring%20-%20-quan-ju-yi-chang-chu-li-qi.html</guid><pubDate>Wed, 14 May 2025 11:47:48 +0000</pubDate></item><item><title>Spring - 事务管理</title><link>https://xxxyjade17.github.io/post/Spring%20-%20-shi-wu-guan-li.html</link><description># 作用
### 在java中使用MySQL事务
***
# 基础用法
### 在业务层 (Service) 的类, 接口, 方法上使用 ```@Transactioal``` 注解
### 将当前方法交给 spring 进行事务管理，方法执行前，开启事务；成功执行完毕，提交事务；出现异常，回滚事务
***
# 设置回滚
 ### rollbackFor = {异常.class} : 设置检测异常, 进行回滚操作
***
# 事务传播
 ### propagation = 行为
 ### 行为:
    1. REQUIRED | 【默认值】需要事务，有则加入，无则创建新事务
    2. REQUIRES_NEW | 需要新事务，无论有无，总是创建新事务（加粗红色强调）
    3. SUPPORTS | 支持事务，有则加入，无则在无事务状态中运行（加粗红色强调）
    4. NOT_SUPPORTED | 不支持事务，在无事务状态下运行，如果当前存在已有事务，则挂起当前事务
    5. MANDATORY | 必须有事务，否则抛异常
    6. NEVER | 必须没事务，否则抛异常
。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/Spring%20-%20-shi-wu-guan-li.html</guid><pubDate>Tue, 13 May 2025 08:36:22 +0000</pubDate></item><item><title>MyBatis - 动态SQL</title><link>https://xxxyjade17.github.io/post/MyBatis%20-%20-dong-tai-SQL.html</link><description># 动态SQL的概念与应用
动态SQL是一种根据不同的条件动态生成SQL语句的技术。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MyBatis%20-%20-dong-tai-SQL.html</guid><pubDate>Mon, 12 May 2025 09:53:32 +0000</pubDate></item><item><title>MyBatis</title><link>https://xxxyjade17.github.io/post/MyBatis.html</link><description># 什么是MyBatis
**[MyBatis](https://mybatis.net.cn/getting-started.html)** 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MyBatis.html</guid><pubDate>Mon, 12 May 2025 09:47:56 +0000</pubDate></item><item><title>PageHelper</title><link>https://xxxyjade17.github.io/post/PageHelper.html</link><description># 什么是PageHelper
**PageHelper是第三方提供在 Mybatis 框架中实现分页的插件, 用来简化分页操作, 提高开发效率**
***
# 导入依赖
```
&lt;!--分页插件PageHelper--&gt;
&lt;dependency&gt;
       &lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;
       &lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;
       &lt;version&gt;1.4.7&lt;/version&gt;
&lt;/dependency&gt;
```
# 实现代码
- ### Mapper接口
  ```
  @Mapper
  public interface DemoMapper {
      @Select('select emp.*,dept.name deptName from emp left join dept on emp.dept_id=dept.id order by emp.update_time desc')
      public List&lt;Emp&gt; list();
   } 
  ```
  **在实现分页查找的MySQL语句省略limit部分**
- ### Service实现类
  ```
    @Override
    public PageResult&lt;Emp&gt; page(Integer page, Integer pageSize) {

            /**
               *设置分页参数
               *@param page 页码
               *@param pageSize 单页记录数
               */
            PageHelper.startPage(page,pageSize);

            //执行查询
            List&lt;Emp&gt; empList = empMapper.list();

            //结果封装
            Page&lt;Emp&gt; p = (Page)empList;

            return new PageResult&lt;Emp&gt;(p.getTotal(),p.getResult());
    }
  ```
# 总结
  - MySQL语句少写了limit部分
  - Mapper接口可以不用再写page和pageSize参数
  - 不用重新去计算page的起始索引。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/PageHelper.html</guid><pubDate>Sun, 11 May 2025 16:50:14 +0000</pubDate></item><item><title>MySQL - DCL</title><link>https://xxxyjade17.github.io/post/MySQL%20-%20DCL.html</link><description># DCL
## 管理用户
- ### 查询用户
```
use mysql;
select * from user;
```
- ### 创建用户
```
create user '用户名@主机名' identified by '密码';
```
- ### 修改用户密码
```
alter user '用户名@主机名' identified with '原密码' by '新密码';
```
- ### 删除用户
```
drop user '用户名@主机名';
```
***
## 权限控制
- ### 查询权限
```
show grants for '用户名@主机名';
```
- ### 授予权限
```
grant 权限 on 数据库名  表名 to '用户名@主机名';
```
- ### 撤销权限
```
revoke 权限 on 数据库名  表名 from '用户名@主机名';
```
- ### 权限
  **1. 所有权限  :  all, all privileges**
  **2. 查询数据  :  select**
  **3.  插入数据  :  insert**
  **4. 修改数据  :  update**
  **5. 删除数据  :  delete**
  **6. 修改表  :  alter**
  **7. 删除数据库 / 表 / 视图  :  drop**
  **8. 创建数据库 / 表  :  create**
***
## 函数
- ### 字符串函数
  **1. 字符串拼接 :**  ```concat(s1,s2,...); ```
  **2. 转小写 :**  ```lower(str)```
  **3. 转大写 :**  ```upper(str)```
  **4. 在str左侧以pad填充，至长度为n :**  ```lpad(str,n,pad)```
  **5. 在str右侧以pad填充，至长度为n :**  ```rpad(str,n,pad)```
  **6. 去除两侧空格 :**  ```trim(str)```
  **7. 从字符串的start开始截取len个字符 :**  ```substring(str,start,len)```
- ### 数值函数
  **1. 向上取整 :**  ```ceil(num)```
  **2. 向下取整  :**  ```floor( num )```
  **3. x/y的模 :**  ```mod(x/y)```
  **4. 0~1随机数 :**  ```rand( )```
  **5. 四舍五入,保留y位小数 :**  ```round(x,y)```
- ### 日期函数
  **1. 当前日期 :**  ```curdate( )```
  **2. 当前时间 :**  ```curtime( )```
  **3. 当前日期和时间 :**  ```now()```
  **4. 当前年份 :**  ```year(date)```
  **5. 当前月份 :**  ```month(date)```
  **6. 当前日 :**  ```day(date)```
  **7. 在当前日期的type(年月日)加value :**  ```date_add(date,interval value type)```
  **8. 两个之间差的天数 :**  ```detediff(date1,date2)```
- ### 流程控制函数
  1. ```if(value,t,f)```
解释  :  value真返t假返f
  2. ```ifnull(value1,value2)```
解释  :  value1不为null返value1，为null返value2
  3. ```case value when value1 then ans1 when value2 then ans2 ... else default end```
解释  :  value等于value1返回ans1,等于value2返回ans2,...,否则返回default
***
## 约束
- ### 示例
```
create table user(
    id int primary key  auto_increment comment,
    name varchar(10) not null unique ,
    age int check ( age&gt;0 &amp;&amp; age&lt;=120 ),
    status char(1) default 1,
    gender char(1)
)
```
- ### 约束种类
  **not null : 非空约束**
  **unique : 唯一约束**
  **primary key : 主键约束**
  **default : 默认约束**
  **check(条件) : 检查约束**
  **foreign key : 外键约束**
***
## 约束外键
- ### 加入外键
```
create table 表名(
    字段名 数据类型
     ......
     constraint 外键名 foreign key(外键字段名) references 主表(列名)
);
alter table 表名 
add constraint 外键名 
foreign key(外键字段名) 
references 主表(列名)
on delete 删除行为
on update 更新行为;
```
- ### 删除外键
```
alter table 表名 drop  foreign key 外键名
```
- ### 外键删除/更新的行为及其含义
  **no action  :  当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除 / 更新。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MySQL%20-%20DCL.html</guid><pubDate>Sun, 11 May 2025 14:15:37 +0000</pubDate></item><item><title>MySQL - DQL</title><link>https://xxxyjade17.github.io/post/MySQL%20-%20DQL.html</link><description># DQL

## 条件查询 :  
  - **语法 :**  ```select 字段表 from 表名 where 条件列表```
  - **条件列表**
    **and  &amp;&amp;  :  与**
    **or  ||  :  或**
    **not  !  :  非**
    **is null  :  是否空**
    **&lt;&gt;  !=  :  不等**
    **between  __  and  __  : 之间**
    **in( __ , __ , ... ) : 满足条件**
    **like '_%'  : 模糊匹配   _单个字符   %任意字符**
***
## 聚合函数
  **count( )  : 统计行数**
  **avg( )  : 平均值**
  **max( )  : 最大值**
  **min( )  : 最小值**
  **sum( )  : 求和**
***
## 分组查询
  - **语法 :**  ```select 字段表 from 表名 group by 字段表 having 筛选条件```
  - **执行顺序 :**  **where &gt; 聚合函数 &gt; having**
***
## 排序查询 ( 默认升序 ) 
  - **降序查询 :**  ```select 字段表 from 表名 order by 字段表 desc```
  - **升序查询 :**  ```select 字段表 from 表名 order by 字段表 asc```
***
## 分页查询
  - **语法 :**  ```select 字段表 from 表名 limit 起始索引,查询记录数```
  - **起始索引默认为0**
***
## DQL执行顺序
   **4. select**      
   **1. from**       
   **2. where**      
   **3. group by  ____  having**       
   **5. order by**        
   **6. limit**        。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/MySQL%20-%20DQL.html</guid><pubDate>Sun, 11 May 2025 12:16:53 +0000</pubDate></item><item><title>JDBC</title><link>https://xxxyjade17.github.io/post/JDBC.html</link><description># JDBC是什么
JDBC（Java DataBase Connectivity）使用 Java 语言操作关系型数据库的一套 API
# 导入依赖
```xml
&lt;dependency&gt;
        &lt;groupId&gt;com.mysql&lt;/groupId&gt;
        &lt;artifactId&gt;mysql-connector-j&lt;/artifactId&gt;
        &lt;version&gt;8.0.33&lt;/version&gt;
&lt;/dependency&gt;
```
# 简单示例
```java
[1.注册驱动]
Class.forName('com.mysql.cj.jdbc.Driver');

[2.获取数据库连接]
//数据库地址
String url='jdbc:mysql://localhost:3306/web';     
//数据库用户名
String username='root';
//密码
String password='xxxyjade17';
//创建连接对象
Connection connection=DriverManager.getConnection(url,username,password);

[3.获取SQL语句执行]
//创建预执行对象
Statement statement=connection.createStatement();

[4.执行sql]
//接收返回值
int i=statement.executeUpdate('update user set age = 30 where id = 1');

[5.释放资源]
statement.close();
connection.close();
```
# 预编译示例
```java
[1.数据库配置]
String url='jdbc:mysql://localhost:3306/web';
String username='root';
String password='xxxyjade17';
//数据库操作语句
String sql='SELECT id,username,password,name,age from user where username=? and password=?';

[2.创建对象]
//连接对象
Connection connection = null;
//预编译对象
PreparedStatement stmt = null;
//查询返回的结果
ResultSet rs = null;  

[3.执行]
try{
    //创建驱动
    Class.forName('com.mysql.cj.jdbc.Driver');
    //获取连接
    connection=DriverManager.getConnection(url,username,password);
    //获取预编译对象
    stmt=connection.prepareStatement(sql);
    //赋值
    stmt.setString(1,'daqiao');
    stmt.setString(2,'123456');
    //执行操作
    rs=stmt.executeQuery();
    while(rs.next()){
        User user=new User(
            rs.getInt('id'),
            rs.getString('username'),
            rs.getString('password'),
            rs.getString('name'),
            rs.getInt('age')
        );
        System.out.println(user);
    }
} catch (ClassNotFoundException e) {
    throw new RuntimeException(e);
} catch (SQLException e) {
    throw new RuntimeException(e);
} finally {
    try{
        if(rs!=null)rs.close();
        if(stmt!=null)stmt.close();
        if(connection!=null)connection.close();
    } catch (SQLException e) {
        throw new RuntimeException(e);
    }
}
```
。</description><guid isPermaLink="true">https://xxxyjade17.github.io/post/JDBC.html</guid><pubDate>Sun, 11 May 2025 11:52:01 +0000</pubDate></item></channel></rss>